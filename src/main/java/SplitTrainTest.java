import org.apache.commons.io.FileUtils;
import org.bytedeco.javacpp.presets.opencv_core;
import org.datavec.api.io.filters.BalancedPathFilter;
import org.datavec.api.io.filters.PathFilter;
import org.datavec.api.io.filters.RandomPathFilter;
import org.datavec.api.io.labels.ParentPathLabelGenerator;
import org.datavec.api.io.labels.PatternPathLabelGenerator;
import org.datavec.api.split.CollectionInputSplit;
import org.datavec.api.split.FileSplit;
import org.datavec.api.split.InputSplit;
import org.datavec.image.loader.NativeImageLoader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Array;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SplitTrainTest {
    private static long seed = 42;
    protected static final Logger log = LoggerFactory.getLogger(SplitTrainTest.class);
    protected static Random rng = new Random(seed);
    protected static int numExamples = 9338;
    protected static int numLabels = 25;
    protected static int batchSize = 100; //5
    protected static double splitTrainTest = 0.7;

    @SuppressWarnings("Duplicates")
    public InputSplit[] run(String[] args) throws IOException {
        log.info("Load data....");
        ParentPathLabelGenerator labelMaker = new ParentPathLabelGenerator();
        System.out.println(System.getProperty("user.dir") + "======" + "/src/main/resources/malware/");
        File mainPath = new File(System.getProperty("user.dir") + "/src/main/resources/malware");
        FileSplit fileSplit = new FileSplit(mainPath, NativeImageLoader.ALLOWED_FORMATS, rng);

        PathFilter pathFilter ;
        RandomPathFilter randomPathFilter = new RandomPathFilter(rng);
        BalancedPathFilter balancedPathFilter =  new BalancedPathFilter(rng, labelMaker, numExamples, numLabels, batchSize);
        pathFilter = args[0].equals("Balance") ? balancedPathFilter : randomPathFilter ;

        InputSplit[] inputSplit = fileSplit.sample(pathFilter, splitTrainTest,1-splitTrainTest );
        InputSplit trainData = inputSplit[0];
        InputSplit testData = inputSplit[1];
        System.out.println("["+args[0]+"]"+trainData.length());
        Iterator<String> iteratorPathTrain = trainData.locationsPathIterator();
        Iterator<String> iteratorPathTest = testData.locationsPathIterator();
        String outputDirTraining = System.getProperty("user.dir") + "/src/main/resources/training_set/";
        String outputDirTest = System.getProperty("user.dir") + "/src/main/resources/test_set/";

        File dirTrain = new File(outputDirTraining);
        if(dirTrain.exists())
            FileUtils.deleteDirectory(dirTrain);
        dirTrain.mkdir();

        File dirTest = new File(outputDirTest);
        if(dirTest.exists())
            FileUtils.deleteDirectory(dirTest);
        dirTest.mkdir();


        while (iteratorPathTrain.hasNext()) {
            String path = iteratorPathTrain.next();
            int start = getIndexStartSrc(path);

            String pathFromSrc = path.substring(start);
            String name_file = getNameFile(pathFromSrc);
            String code_malware = getCodeMalware(path);
            File dir = new File(outputDirTraining + "malware_" + code_malware);
            File image_to_copy = new File(outputDirTraining + "malware_" + code_malware + "/" + name_file);
            // create dir
            if (!dir.exists())
                dir.mkdir();

            File image_to_open = new File(System.getProperty("user.dir") + pathFromSrc);
            Files.copy(image_to_open.toPath(), image_to_copy.toPath(), StandardCopyOption.REPLACE_EXISTING);

        }

        while (iteratorPathTest.hasNext()) {
            String path = iteratorPathTest.next();
            int start = getIndexStartSrc(path);

            String pathFromSrc = path.substring(start);
            String name_file = getNameFile(pathFromSrc);
            String code_malware = getCodeMalware(path);
            File dir_test = new File(outputDirTest + "malware_" + code_malware);
            File image_to_copy = new File(outputDirTest + "malware_" + code_malware + "/" + name_file);

            // create dir
            if (!dir_test.exists())
                dir_test.mkdir();

            File image_to_open = new File(System.getProperty("user.dir") + pathFromSrc);
            Files.copy(image_to_open.toPath(), image_to_copy.toPath(), StandardCopyOption.REPLACE_EXISTING);
        }
        return inputSplit;

    }

    private static String getNameFile(String pathFromSrc){
        return pathFromSrc.substring(pathFromSrc.lastIndexOf("/")+1);
    }

    private static String getCodeMalware (String path){
        return path.substring(103,path.lastIndexOf("/"));
    }

    private static  int getIndexStartSrc(String path){
        Pattern pattern = Pattern.compile("/src");
        Matcher matcher = pattern.matcher(path);
        int start = 0;
        while (matcher.find()) {
            start = matcher.start();
        }
        return start;
    }

    public static void main(String[] args) throws IOException {
        new SplitTrainTest().run(args);

    }
}
