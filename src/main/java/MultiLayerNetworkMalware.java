import org.deeplearning4j.nn.api.OptimizationAlgorithm;
import org.deeplearning4j.nn.conf.MultiLayerConfiguration;
import org.deeplearning4j.nn.conf.NeuralNetConfiguration;
import org.deeplearning4j.nn.conf.Updater;
import org.deeplearning4j.nn.conf.inputs.InputType;
import org.deeplearning4j.nn.conf.layers.ConvolutionLayer;
import org.deeplearning4j.nn.conf.layers.OutputLayer;
import org.deeplearning4j.nn.conf.layers.SubsamplingLayer;
import org.deeplearning4j.nn.multilayer.MultiLayerNetwork;
import org.deeplearning4j.nn.weights.WeightInit;
import org.nd4j.linalg.activations.Activation;
import org.nd4j.linalg.lossfunctions.LossFunctions;

public class MultiLayerNetworkMalware {
    private int channel;
    private int width;
    private int height;
    private int seed;
    private int droppout;
    private int learningRate;


    public static MultiLayerNetwork getVGG16(int channel, int width, int height, int numLabels, double learningRate, double l2){

        ConvolutionLayer.AlgoMode cudnnAlgoMode = ConvolutionLayer.AlgoMode.NO_WORKSPACE;

        MultiLayerConfiguration conf =
                new NeuralNetConfiguration.Builder()
                .learningRate(learningRate)
                .regularization(true).l2(l2)
                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)
                .updater(Updater.NESTEROVS).activation(Activation.RELU)
                .momentum(0.9)
                .weightInit(WeightInit.XAVIER)
                .list()
                    // block 1
                    .layer(0, new ConvolutionLayer.Builder().kernelSize(3,3).stride(1,1)
                                    .padding(1,1).nIn(channel).nOut(64)
                                    .cudnnAlgoMode(ConvolutionLayer.AlgoMode.NO_WORKSPACE).build())
                    .layer(1, new ConvolutionLayer.Builder().kernelSize(3,3).stride(1,1)
                                    .padding(1,1).nOut(64)
                                    .cudnnAlgoMode(ConvolutionLayer.AlgoMode.NO_WORKSPACE).build())
                    .layer(2, new SubsamplingLayer.Builder()
                            .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)
                            .stride(2, 2).build())

                    // block 2
                    .layer(3, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(128).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(4, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(128).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(5, new SubsamplingLayer.Builder()
                            .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)
                            .stride(2, 2).build())

                    // block 3
                    .layer(6, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(256).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(7, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(256).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(8, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(256).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(9, new SubsamplingLayer.Builder()
                            .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)
                            .stride(2, 2).build())

                    // block 4
                    .layer(10, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(11, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(12, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(13, new SubsamplingLayer.Builder()
                            .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)
                            .stride(2, 2).build())

                    // block 5
                    .layer(14, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(15, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(16, new ConvolutionLayer.Builder().kernelSize(3, 3).stride(1, 1)
                            .padding(1, 1).nOut(512).cudnnAlgoMode(cudnnAlgoMode).build())
                    .layer(17, new SubsamplingLayer.Builder()
                            .poolingType(SubsamplingLayer.PoolingType.MAX).kernelSize(2, 2)
                            .stride(2, 2).build())
                    .layer(18, new OutputLayer.Builder(
                            LossFunctions.LossFunction.NEGATIVELOGLIKELIHOOD).name("output")
                            .nOut(numLabels).activation(Activation.SOFTMAX) // radial basis function required
                            .build())
                    .backprop(true).pretrain(false).setInputType(InputType
                    .convolutionalFlat(height, width, channel))
                    .build();

        return new MultiLayerNetwork(conf);
    }


}
