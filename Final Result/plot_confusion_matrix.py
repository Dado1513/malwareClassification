import itertools
import numpy as np
import matplotlib.pyplot as plt
from sklearn import svm, datasets
from sklearn.model_selection import train_test_split
import sys

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix CNN',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=90)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    #for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
    #    plt.text(j, i, format(cm[i, j], fmt),
    #             horizontalalignment="center",
    #             color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')
if len(sys.argv) > 2:
    plt.figure()
    name_file = sys.argv[1]
    file_open = open(name_file,"r")
    content = file_open.readlines()
    content = [x.strip() for x in content]
    array = []
    for x in content:
        value = x.split()
        array.append(value)
    value = np.array(array)

    with open(sys.argv[2],'r') as f :
        class_name = f.readlines()
    class_name = [x.strip() for x in class_name]
    value  = value.astype(int)
    #print(class_name)
    plot_confusion_matrix(value,class_name)
    plt.show()
else:
    print("[*] Usage python3 plot_confusion_matrix.py file_matrix file_class_name")
